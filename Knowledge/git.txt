查看：

$ git log                        //常规查看log 命令
$ git log --pretty=oneline   //如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
$ git log --graph            //可以查看分支合并图
$ git log --graph --oneline  --all --decorate=full     //graph 分支图显示，oneline 单行显示，--decorate 可显示分支名称
$ git reflog                 //用来记录你的每一次命令
$ git show CommitID          //查看CommitID的修改内容


版本回退：

$ git reset --hard HEAD^ //HEAD^:上一个版本，HEAD^^:上上一个版本，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100，
注意：使用上述方式会将history仓库中的HEAD 版本删除掉，如何将已经删除掉的HEAD版本恢复回来，前提需要知道被删除的版本的command ID

$ git reset --hard 1094a      //1094a 为删除掉的HEAD command ID, 此命令能够恢复1094a版本


$ git reset HEAD <file>        //git reset HEAD -- readme.txt 把stage库里的内容回复至版本库里最新的版本


$ git checkout -- <file name>   //git checkout -- readme.txt 把readme.txt文件在工作区的修改全部撤销
有两种情况：

一种是readme.txt自修改后还没有被放到暂存区（stage），现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又做了修改，现在，撤销修改就回到添加到暂存区后的状态。

概况成一句话，checkout 是取版本库或stage库中最新的内容到本地。

对比：

$ git diff HEAD -- readme.txt                    //查看工作区和版本库里面最新版本的区别

删除文件：

$ rm test.txt                           //删除本地文件
$ git rm test.txt
$ git commit -m "remove test.txt" //删除版本库中的文件


分支管理:

$ git checkout -b dev     //创建dev 分支，并切换至dev分支
$ git switch -c dev       //新版（目前版本不可用），创建dev 分支，并切换至dev分支
//git checkout命令加上-b参数表示创建并切换，相当于以下两条命令 $ git branch dev，$ git checkout dev



$ git branch              //查看当前在哪个分支，前分支前面会标一个*号
$ git branch -r            //查看远程库分支
$ git branch -vv             //查看每一个分支的最后一次提交，能看到本地分支与远程分支的对应关系
$ git checkout master     //在dev分支中修改完成，切回至master分支
$ git switch master       //新版（目前版本不可用），在dev分支中修改完成，切回至master分支
$ git merge dev           //dev分支中的工作成果合并至master分支，合并指定分支到当前分支。采用Fast forward模式，但这种模式下，删除分支后，会丢掉分支log信息
$ git merge --no-ff -m "merge with no-ff" dev   //--no-ff 强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
$ git branch -d dev       //删除dev分支
$ git branch -D feature-vulcan    // 没有合并的分支，采用-D的方式强制删除
$ git stash               //储藏当前分支的现场
$ git stash list          //查看工作现场
$ git stash apply         //Stash内容恢复，stash内容不删除
$ git stash drop          //Stash内容删除
$ git stash pop           //Stash内容恢复和删除
$ git cherry-pick 4c805e2  //将 提交历史ID:4c805e2 复制到当前分支中  


远程仓库：

$ git remote -v               //查看远程库详细信息
$ git remote                  //查看远程库信息
$ git push origin master      //推送分支，将本地master分支推送至远程库origin中对应master的分支
$ git push origin dev         //推送分支，将本地dev分支推送至远程库origin中对应的dev分支，如果远程库还没有dev分支，会自动创建
$ git checkout -b dev origin/dev  //创建远程的dev分支至本地，创建本地dev分支
$ git branch --set-upstream-to=origin/dev dev //如果git pull失败时，可能本地与远程分支之间没有建立链接，本地dev与远程origin/dev建立链接


拉取远程仓库至本地时一定要用 $ git checkout -b dev origin/dev   ，不然后患无穷





Git是一个开源的分布式版本控制系统，由于其强大的版本控制能力，广泛被用于软件开发中。

以下是一些常见的Git命令：

git init：用于初始化一个新的Git仓库。

git clone [url]：从远程仓库克隆一个本地副本。

git add [file]：将文件添加到暂存区。

git commit -m "message"：将暂存区的文件提交到本地版本库，并附带一条提交消息。

git push：将本地版本库的提交推送到远程仓库。

git pull：从远程仓库拉取最新的修改。

git branch：查看分支列表。

git checkout [branch]：切换到指定分支。

git merge [branch]：将指定分支的修改合并到当前分支。

git status：查看当前工作区的状态。

git log：查看提交历史。

git reset [commit]：回退到指定的提交。

git reset HEAD^      回退上一笔提交
git commit --amend --no-edit           上一次提交的内容有错误，需要重新提交时使用该命令，详情参考利用`git commit —amend —no-edit`命令修改上一次变更内容-CSDN博客
这只是一些常见的Git命令，Git还有很多其他功能，可以根据实际需求使用不同的命令。











参考：
https://blog.csdn.net/weixin_43398729/article/details/121129100
https://blog.csdn.net/chilun8494/article/details/100645862